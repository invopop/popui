package alpine

import (
	"github.com/invopop/popui/go/classes"
	"github.com/invopop/popui/go/props"
	"github.com/invopop/popui/icons"
	"strconv"
)

// UUIDCopy renders a UUID with a copy button.
templ UUIDCopy(p props.UUIDCopy) {
	<div
		class={ classes.UUIDCopy }
		x-data={ `{
			prefixLength: ` + strconv.Itoa(p.PrefixLength) + `,
			suffixLength: ` + strconv.Itoa(p.SuffixLength) + `,
			showCopied: false,
			hasPopover: ` + func() string {
				if p.CopiedText != "" {
					return "true"
				}
				return "false"
			}() + `,
			
			get uuid() {
				` + func() string {
				if p.XModel != "" {
					return `return ` + p.XModel + ` || '';`
				}
				return `return '` + p.UUID + `';`
			}() + `
			},
			
			get formattedUuid() {
				if (!this.prefixLength && !this.suffixLength) return this.uuid;
				if (!this.uuid || this.uuid.length <= this.prefixLength + this.suffixLength) return this.uuid;
				const prefix = this.uuid.substring(0, this.prefixLength);
				const suffix = this.uuid.substring(this.uuid.length - this.suffixLength);
				return prefix + '...' + suffix;
			},
			
			async copyToClipboard() {
				try {
					await navigator.clipboard.writeText(this.uuid);
					if (!this.hasPopover) return;
                    this.showCopied = true;
                    setTimeout(() => {
                        this.showCopied = false;
                    }, 2000);
				} catch (err) {
					console.error('Failed to copy text: ', err);
				}
			}
		}` }
		{ p.Attrs... }
	>
		<button
			class={ classes.UUIDCopyText }
			@click="copyToClipboard()"
			x-text="formattedUuid"
		></button>
		<button
			class={ classes.UUIDCopyButton }
			@click="copyToClipboard()"
		>
			<div class={ classes.UUIDCopyIcon }>
				@icons.Duplicate()
			</div>
		</button>
		if p.CopiedText != "" {
			<div
				class={ classes.UUIDCopyPopover }
				x-show="showCopied"
				x-transition:enter="transition ease-out duration-200"
				x-transition:enter-start="opacity-0 transform scale-95"
				x-transition:enter-end="opacity-100 transform scale-100"
				x-transition:leave="transition ease-in duration-150"
				x-transition:leave-start="opacity-100 transform scale-100"
				x-transition:leave-end="opacity-0 transform scale-95"
			>
				{ p.CopiedText }
			</div>
		}
	</div>
}
