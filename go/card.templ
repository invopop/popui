package popui

import (
	"fmt"
	"github.com/invopop/gobl/num"
	"github.com/invopop/popui/go/classes"
	"github.com/invopop/popui/go/props"
	"github.com/invopop/popui/icons"
)

const (
	// https://github.com/HatScripts/circle-flags
	flagProviderURL = "https://hatscripts.github.io/circle-flags/flags/"
)

// Card provides a UI element for wrapping general information.
templ Card(opts ...props.Card) {
	{{ p := props.First(opts) }}
	if p.URL != "" {
		<a
			href={ p.URL }
			class={
				templ.KV(classes.Card, p.Class == ""),
				templ.KV(classes.CardDisabled, p.Disabled),
				templ.KV(p.Class, p.Class != ""),
			}
			{ p.Attrs... }
		>
			if !p.EmptyHeader() {
				@CardHeader(p.Header)
			}
			{ children... }
		</a>
	} else {
		<div
			class={
				templ.KV(classes.Card, p.Class == ""),
				templ.KV(p.Class, p.Class != ""),
			}
			{ p.Attrs... }
		>
			if !p.EmptyHeader() {
				@CardHeader(p.Header)
			}
			{ children... }
		</div>
	}
}

// CardHeader can be used as part of a Card component or standalone.
// It provides an Avatar/Initial, Country Flag, Title and a free slot.
templ CardHeader(opts ...props.CardHeader) {
	{{ p := props.First(opts) }}
	<div
		class={
			templ.KV(classes.CardHeader, p.Class == ""),
			templ.KV(p.Class, p.Class != ""),
		}
		{ p.Attrs... }
	>
		if !p.HideAvatar {
			<div style="position: relative;">
				if p.ImgSrc != "" {
					@Avatar(props.Avatar{Large: true}) {
						@Image(props.Image{Src: p.ImgSrc})
					}
				} else if p.Title != "" {
					@Avatar(props.Avatar{Large: true, Initial: string(p.Title[0])})
				}
				if p.FlagISO != "" {
					<img class={ classes.CardHeaderFlag } src={ flagProviderURL + p.FlagISO + ".svg" } width="12"/>
				}
			</div>
		}
		if p.Title != "" {
			<div class={ classes.CardHeaderTitle }>
				<p>{ p.Title }</p>
				if p.Subtitle != "" {
					<p>{ p.Subtitle }</p>
				}
			</div>
		}
		{ children... }
	</div>
}

// CardProgressBar provides a UI element for wrapping info with a progress bar.
templ CardProgressBar(opts ...props.CardProgressBar) {
	{{ p := props.First(opts) }}
	{{ f := p.Formatter() }}
	<div
		class={
			templ.KV(classes.CardProgressBar, p.Class == ""),
			templ.KV(p.Class, p.Class != ""),
		}
		{ p.Attrs... }
	>
		<div class={ classes.CardProgressBarHeader }>
			<p>
				<span class={ classes.CardProgressBarHeaderTitle }>
					<span>{ p.Title }</span>
					if p.Subtitle != "" {
						<span>Â· </span>
					}
				</span>
				if p.Subtitle != "" {
					<span class={ classes.CardProgressBarHeaderSubtitle }>{ p.Subtitle }</span>
				}
			</p>
			if !p.HideCounter {
				<div class={ classes.CardProgressBarHeaderAmount }>
					@icons.Invopop()
					<span class={ classes.CardProgressBarHeaderAmountCurrent }>{ f.Amount(num.MakeAmount(p.Current, 0)) }</span>
					<span>/{ f.Amount(num.MakeAmount(p.Total, 0)) }</span>
				</div>
			}
		</div>
		<div class={ classes.CardProgressBarProgress }>
			<div class={ percentage(p.PercentValue(), p.PercentColor()) }></div>
		</div>
	</div>
}

// CardDashboard provides a grid of small info cards for showing dashboard-like information
templ CardDashboard(p props.CardDashboard) {
	<ul
		class={
			templ.KV(classes.CardDashboard, p.Class == ""),
			templ.KV(p.Class, p.Class != ""),
		}
		{ p.Attrs... }
	>
		for _, i := range p.Items {
			<li class={ classes.CardDashboardItem }>
				<p class={ classes.CardDashboardItemLabel }>{ i.Label }</p>
				<p class={ classes.CardDashboardItemValue }>{ i.Value }</p>
			</li>
		}
	</ul>
}

// CardFile provides a card for displaying file details
templ CardFile(opts ...props.CardFile) {
	{{ p := props.First(opts) }}
	<div
		class={
			templ.KV(classes.CardFile, p.Class == ""),
			templ.KV(p.Class, p.Class != ""),
		}
		{ p.Attrs... }
	>
		{ children... }
	</div>
}

css percentage(percent int64, color string) {
	border-radius: 1px;
	height: 4px;
	width: { fmt.Sprintf("%d%%", percent) };
	background: { color };
}
