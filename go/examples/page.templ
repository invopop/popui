package examples

import (
	popui "github.com/invopop/popui/go"
	"github.com/invopop/popui/go/alpine"
	"github.com/invopop/popui/go/classes"
	"github.com/invopop/popui/go/props"
)

// Page provides the main wrapper around content.
templ Page() {
	@popui.PopupLayout(props.PopupLayout{Title: "Invopop - Appkit"}) {
		<div
			style="padding: 16px;"
			x-data="{
				inputText: {
					errorText: '',
					disabled: false,
					value: ''
				},
				checkbox: {
					value: ''
				},
				select: {
					errorText: '',
					disabled: false,
					value: '',
					options: ['', 'Sam', 'Juan', 'Javi', 'Luismi']
				},
				textarea: {
					errorText: '',
					disabled: false,
					value: '',
				},
				defaultButton: {
					disabled: false,
				},
				primaryButton: {
					disabled: false,
				},
				tags: [
					'One',
					'Two'
				],
				tagRemoved(tag) {
					alert(`Removed tag: ${tag}`)
				},
				tagAdded(tag) {
					alert(`Added tag: ${tag}`)
				}
			}"
		>
			// Info
			@fieldConfig(&config{
				Title: "Info Text",
			})
			<div>
				@popui.Info() {
					The Silo Entry ID of the new document will be available in the 
					@popui.Mark() {
						connected-silo-entry-id
					}
					shared meta field.
				}
			</div>
			// Title
			@fieldConfig(&config{
				Title: "Title Text",
			})
			<div>
				@popui.Title() {
					This is a main section
				}
			</div>
			// Subtitle
			@fieldConfig(&config{
				Title: "Subtitle Text",
			})
			<div>
				@popui.Subtitle() {
					This is a secondary section
				}
			</div>
			// Tags
			@fieldConfig(&config{
				Title: "Tags",
			})
			<div>
				@alpine.Tags(props.Tags{
					Label:    "Tags",
					Tags:     "tags",
					OnRemove: "tagRemoved",
					OnAdd:    "tagAdded",
				})
			</div>
			// Avatar
			@fieldConfig(&config{
				Title: "Avatar with image",
			})
			<div>
				@popui.Avatar(props.Avatar{}) {
					@popui.Image(props.Image{
						Src: "https://picsum.photos/200",
						Alt: "Random Image",
					})
				}
			</div>
			@fieldConfig(&config{
				Title: "Avatar with initial",
			})
			<div>
				@popui.Avatar(props.Avatar{
					Class: classes.AvatarBase + " " + classes.AvatarInitial,
				}) {
					<p class="uppercase">i</p>
				}
			</div>
			// Popover
			@fieldConfig(&config{
				Title: "Popover",
			})
			<div>
				@popui.Popover(props.Popover{
					ID:          "popover",
					ButtonLabel: "Do Stuff",
				}) {
					<ul>
						<li class={ classes.PopoverListItem }>
							<button class="w-full text-left" @click="alert('1')">1</button>
						</li>
						<li class={ classes.PopoverListItem }>
							<button class="w-full text-left" @click="alert('2')">2</button>
						</li>
					</ul>
				}
			</div>
			// Input Text
			@fieldConfig(&config{
				Title:  "Input Text",
				XModel: "inputText.value",
				Inputs: []input{
					input{
						Label:  "Error Text",
						Type:   "text",
						Xmodel: "inputText.errorText",
					},
					input{
						Label:  "Disabled",
						Type:   "checkbox",
						Xmodel: "inputText.disabled",
					},
				},
			})
			<div class="max-w-md">
				@popui.InputText(
					props.InputText{
						Label: "Name",
						Error: props.Error{Attrs: templ.Attributes{"x-text": "inputText.errorText"}},
						Attrs: templ.Attributes{
							"x-model":   "inputText.value",
							":disabled": "inputText.disabled",
							":class":    "{ '" + classes.InputTextError + "': inputText.errorText }",
						},
					})
			</div>
			// Checkbox
			@fieldConfig(&config{
				Title:  "Checkbox",
				XModel: "checkbox.value",
			})
			<div class="max-w-md">
				@popui.Checkbox(
					props.Checkbox{
						Label: "This is the label for the checbox",
						Attrs: templ.Attributes{
							"x-model": "checkbox.value",
						},
					})
			</div>
			// Select
			@fieldConfig(&config{
				Title:  "Select",
				XModel: "select.value",
				Inputs: []input{
					input{
						Label:  "Error Text",
						Type:   "text",
						Xmodel: "select.errorText",
					},
					input{
						Label:  "Disabled",
						Type:   "checkbox",
						Xmodel: "select.disabled",
					},
				},
			})
			<div class="max-w-md">
				@popui.Select(
					props.Select{
						Label: "Name",
						Error: props.Error{Attrs: templ.Attributes{"x-text": "select.errorText"}},
						Attrs: templ.Attributes{
							"x-model":   "select.value",
							":disabled": "select.disabled",
							":class":    "{ '" + classes.SelectError + "': select.errorText }",
						},
					}) {
					<template x-for="row in select.options" :key="row">
						<option
							:value="row"
							x-text="row"
						></option>
					</template>
				}
			</div>
			// Textarea
			@fieldConfig(&config{
				Title:  "Textarea",
				XModel: "textarea.value",
				Inputs: []input{
					input{
						Label:  "Error Text",
						Type:   "text",
						Xmodel: "textarea.errorText",
					},
					input{
						Label:  "Disabled",
						Type:   "checkbox",
						Xmodel: "textarea.disabled",
					},
				},
			})
			<div class="max-w-md">
				@popui.Textarea(
					props.Textarea{
						Label: "Name",
						Error: props.Error{Attrs: templ.Attributes{"x-text": "textarea.errorText"}},
						Rows:  8,
						Attrs: templ.Attributes{
							"x-model":   "textarea.value",
							":disabled": "textarea.disabled",
							":class":    "{ '" + classes.TextareaError + "': textarea.errorText }",
						},
						Monospaced: true,
					})
			</div>
			// Default Button
			@fieldConfig(&config{
				Title: "Default Button",
				Inputs: []input{
					input{
						Label:  "Disabled",
						Type:   "checkbox",
						Xmodel: "defaultButton.disabled",
					},
				},
			})
			<div class="max-w-md">
				@popui.Button(
					props.Button{
						Attrs: templ.Attributes{"@click": "alert('Default button clicked')", ":disabled": "defaultButton.disabled"},
					}) {
					Click Me
				}
			</div>
			// Primary Button
			@fieldConfig(&config{
				Title: "Primary Button",
				Inputs: []input{
					input{
						Label:  "Disabled",
						Type:   "checkbox",
						Xmodel: "primaryButton.disabled",
					},
				},
			})
			<div class="max-w-md">
				@popui.Button(
					props.Button{
						Variant: "primary",
						Attrs:   templ.Attributes{"@click": "alert('Primary button clicked')", ":disabled": "primaryButton.disabled"},
					}) {
					Click Me
				}
			</div>
		</div>
	}
}

type input struct {
	Label  string
	Type   string
	Xmodel string
}

type config struct {
	Title  string
	XModel string
	Inputs []input
}

templ fieldConfig(conf *config) {
	<hr style="margin-top: 16px;"/>
	<h2 style="margin-top: 16px; margin-bottom: 16px;">
		{ conf.Title }:
		if conf.XModel != "" {
			<span x-text={ conf.XModel }></span>
		}
	</h2>
	if conf.Inputs != nil {
		<div class="popui-demo-wrapper">
			<h3>Props</h3>
			for _, i := range conf.Inputs {
				<label class="popui-demo-label">
					{ i.Label } <input
	type={ i.Type }
	if i.Type == "text" || i.Type == "number" {
		class="popui-demo-input"
	}
	x-model={ i.Xmodel }
/>
				</label>
			}
		</div>
	}
}
