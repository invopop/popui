package popui

import "github.com/invopop/popui/go/classes"
import "github.com/invopop/popui/go/props"
import "github.com/invopop/popui/icons"

// P provides a p element
templ P() {
	<p class={ classes.P }>
		{ children... }
	</p>
}

// Title provides a h1 element
templ Title() {
	<h1 class={ classes.Title }>
		{ children... }
	</h1>
}

// Subtitle provides a h2 element
templ Subtitle() {
	<h2 class={ classes.Subtitle }>
		{ children... }
	</h2>
}

// Description provides a p element using the description popui class
templ Description() {
	<p class={ classes.Description }>
		{ children... }
	</p>
}

// Info provides a nicely formatted info text
templ Info() {
	<div class={ classes.Info }>
		<div>
			@InfoIcon()
		</div>
		<div class={ classes.InfoText }>
			{ children... }
		</div>
	</div>
}

// Warning provides a nicely formatted info text with a warning icon
templ Warning() {
	<div class={ classes.Info }>
		<div>
			@icons.Alert()
		</div>
		<div class={ classes.InfoText }>
			<p class={ classes.WarningText }>
				{ children... }
			</p>
		</div>
	</div>
}

// Notification provides a wrapper for a text to be shown as feedback.
// Vaiid types are: info, warning, error, success
templ Notification(p props.Notification) {
	<div
		class={
			templ.KV(classes.Notification, p.Class == ""),
			templ.KV(classes.NotificationWarning, p.Type == "warning"),
			templ.KV(classes.NotificationInfo, p.Type == "info"),
			templ.KV(classes.NotificationError, p.Type == "error"),
			templ.KV(classes.NotificationSuccess, p.Type == "success"),
			templ.KV(p.Class, p.Class != ""),
		}
		{ p.Attrs... }
	>
		if p.Type != "" {
			<div class="mt-1">
				if p.Type == "error" {
					@icons.Failure()
				} else if p.Type == "warning" {
					@icons.Alert()
				}
			</div>
		}
		<div>
			if p.Text != "" || p.Description != "" {
				<p class="font-medium">{ p.Text }</p>
				<p class="text-dimmed">{ p.Description }</p>
			} else {
				{ children... }
			}
		</div>
	</div>
}

// FlashMessage provides a toast message to be shown as feedback.
// Valid types are: success
templ FlashMessage(p props.FlashMessage) {
	<div
		class={
			templ.KV(classes.FlashMessage, p.Class == ""),
			templ.KV(p.Class, p.Class != ""),
			templ.KV(classes.FlashMessageSuccess, p.Type == "success"),
		}
		{ p.Attrs... }
	>
		if p.Type == "success" {
			@icons.Success()
		}
		if p.Message != "" {
			{ p.Message }
		} else {
			{ children... }
		}
	</div>
}

// Mark provides a mark element formatted as a highlighted text
templ Mark() {
	<mark>
		{ children... }
	</mark>
}

// Prose is a wrapper for using prose classes from tailwind.
// It formats raw html with a default styling
templ Prose() {
	<div class={ classes.Prose }>
		{ children... }
	</div>
}

// HorizontalDivider provides an horizontal separator with a dashed line
templ HorizontalDivider() {
	<div class={ classes.HorizontalDividerWrapper }>
		<div class={ classes.HorizontalDivider }></div>
	</div>
}

// DescList provides a wrapper for Description Lists
templ DescList() {
	<dl class={ classes.DescList }>
		{ children... }
	</dl>
}

// DescRow provides a wrapper for DescList children. Expects a term (dt) nd description (dd)
templ DescRow() {
	<div>
		{ children... }
	</div>
}

// EmptyState provides a layout to displaying an empty state ilustration with some call to action
templ EmptyState(p props.EmptyState) {
	<div
		class={
			templ.KV(classes.EmptyState, p.Class == ""),
			templ.KV(p.Class, p.Class != ""),
		}
		{ p.Attrs... }
	>
		@EmptyStateIcon()
		@Subtitle() {
			{ p.Title }
		}
		@Description() {
			{ p.Description }
		}
		{ children... }
	</div>
}
