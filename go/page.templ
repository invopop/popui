package popui

import (
	"github.com/invopop/popui/go/classes"
	"github.com/invopop/popui/go/props"
	"github.com/invopop/popui/icons"
)

var hamburgerHandle = templ.NewOnceHandle()

// PageHeader provides a wrapper for the page header
templ PageHeader(p props.PageHeader) {
	<div
		class={
			templ.KV(classes.PageHeader, p.Class == ""),
			templ.KV(p.Class, p.Class != ""),
		}
		{ p.Attrs... }
	>
		<div class={ classes.PageTitleWrapper }>
			@hamburgerButton()
			if p.Breadcrumbs != nil {
				@PageBreadcrumbs() {
					for _, i := range p.Breadcrumbs {
						<li>
							if i.URL != "" {
								<a href={ i.URL } { i.Attrs... }>{ i.Name }</a>
							} else {
								<span { i.Attrs... }>{ i.Name }</span>
							}
						</li>
					}
				}
			}
			@PageTitle() {
				{ p.Title }
			}
		</div>
		<div class={ classes.PageHeaderActions }>
			{ children... }
		</div>
	</div>
}

// PageContent provides a wrapper for the page content
templ PageContent() {
	<div class={ classes.PageContent }>
		{ children... }
	</div>
}

// PageSection provides a wrapper for page sections.
// Title and Description can be passed as prop
templ PageSection(p props.PageSection) {
	<div class="w-full">
		@HorizontalDivider()
		<div
			class={
				templ.KV(classes.PageSection, p.Class == ""),
				templ.KV(p.Class, p.Class != ""),
			}
			{ p.Attrs... }
		>
			<div class={ classes.PageSectionTitle }>
				@Subtitle() {
					{ p.Title }
				}
				@Description() {
					{ p.Description }
				}
			</div>
			<div class={ classes.PageSectionContent }>
				{ children... }
			</div>
		</div>
	</div>
}

// PageBreadcrumbs provides a popui component to show navigation breadcrumbs. List items can be either links or text
templ PageBreadcrumbs() {
	<ul class={ classes.PageBreadcrumbs }>
		{ children... }
	</ul>
}

// PageActions provides a wrapper for displaying items such as buttons at the right of a PageHeader component
templ PageActions() {
	<div class={ classes.PageHeaderActions }>
		{ children... }
	</div>
}

// PageTitle provides a h1 element used as Page title
templ PageTitle() {
	<h1 class={ classes.PageTitle }>
		{ children... }
	</h1>
}

templ hamburgerButton() {
	@templ.JSONScript("querySelectors", struct {
		Button  string
		Sidebar string
		Page    string
	}{
		Button:  "." + classes.PageTitleWrapper + " > button",
		Sidebar: "." + classes.Sidebar,
		Page:    "." + classes.Page,
	})
	@Button(props.Button{}) {
		@icons.Menu()
	}
	@hamburgerHandle.Once() {
		<script>
			document.addEventListener('DOMContentLoaded', () => {
				const selectors = JSON.parse(document.getElementById('querySelectors').textContent)
				const button = document.querySelector(selectors.Button)
				const sidebar = document.querySelector(selectors.Sidebar)
				const page = document.querySelector(selectors.Page)

				const showSidebar = (e) => {
					e.stopPropagation()
					if (page.classList.contains('menu--active')) {
						hideSidebar()
						return
					}
					sidebar.classList.add('menu--active')
					page.classList.add('menu--active')
				}

				const hideSidebar = () => {
					sidebar.classList.remove('menu--active')
					page.classList.remove('menu--active')
				}

				if (button) {
					button.addEventListener('click', showSidebar)
				}

				if (page) {
					page.addEventListener('click', hideSidebar)
				}
			});
		</script>
	}
}
